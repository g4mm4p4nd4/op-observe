from __future__ import annotations

from agentic_radar.detectors.vulnerabilities import VulnerabilityMapper


def build_osv_payload() -> dict:
    return {
        "results": [
            {
                "source": {"path": "requirements.txt"},
                "packages": [
                    {
                        "package": {"name": "promptlib", "ecosystem": "PyPI"},
                        "versions": ["1.2.3"],
                        "vulnerabilities": [
                            {
                                "id": "CVE-2024-1234",
                                "summary": "Prompt injection allows remote tool takeover.",
                                "aliases": ["GHSA-aaaa-bbbb"],
                                "severity": [
                                    {"type": "CVSS_V3", "score": "9.1"}
                                ],
                                "references": [
                                    {"type": "ADVISORY", "url": "https://example.com/CVE-2024-1234"}
                                ],
                                "database_specific": {"fixed_versions": ["1.2.4"]},
                                "affected": [
                                    {
                                        "ranges": [
                                            {"events": [{"fixed": "1.2.4"}]}
                                        ]
                                    }
                                ],
                            }
                        ],
                    }
                ],
            }
        ]
    }


def build_pip_audit_payload() -> dict:
    return {
        "dependencies": [
            {
                "name": "promptlib",
                "version": "1.2.3",
                "vulns": [
                    {
                        "id": "CVE-2024-1234",
                        "aliases": ["GHSA-aaaa-bbbb"],
                        "severity": "high",
                        "description": "Remote code execution via command injection in plugin.",
                        "fix_versions": ["1.2.5"],
                        "references": ["https://example.com/CVE-2024-1234"],
                    }
                ],
            },
            {
                "name": "agentshell",
                "version": "0.4.0",
                "vulns": [
                    {
                        "id": "GHSA-2024-0001",
                        "severity": "medium",
                        "description": "Generic dependency risk without specific keywords.",
                    }
                ],
            },
        ]
    }


def test_vulnerability_mapper_combines_osv_and_pip_audit() -> None:
    mapper = VulnerabilityMapper()

    osv_findings = mapper.from_osv(build_osv_payload())
    assert len(osv_findings) == 1
    osv = osv_findings[0]
    assert osv.package == "promptlib"
    assert osv.severity == "CRITICAL"
    assert "LLM01 - Prompt Injection" in osv.owasp_llm_categories
    assert "AA01 - Prompt & Input Integrity" in osv.owasp_agentic_categories
    assert set(osv.fix_versions) == {"1.2.4"}

    pip_findings = mapper.from_pip_audit(build_pip_audit_payload())
    assert len(pip_findings) == 2

    command_exec = next(f for f in pip_findings if f.vulnerability_id == "CVE-2024-1234")
    assert "LLM07 - Insecure Plugin Design" in command_exec.owasp_llm_categories
    assert "AA02 - Tool Misuse & Escalation" in command_exec.owasp_agentic_categories

    generic = next(f for f in pip_findings if f.vulnerability_id == "GHSA-2024-0001")
    assert generic.owasp_llm_categories == ("LLM05 - Supply Chain Vulnerabilities",)
    assert generic.owasp_agentic_categories == ("AA06 - Supply Chain & Dependency Risk",)

    merged = mapper.merge(osv_findings, pip_findings)
    assert len(merged) == 2

    merged_prompt = next(f for f in merged if f.vulnerability_id == "CVE-2024-1234")
    assert set(merged_prompt.fix_versions) == {"1.2.4", "1.2.5"}
    assert merged_prompt.severity == "CRITICAL"
